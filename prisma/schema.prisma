generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  username   String?  @unique
  password   String
  name       String?
  bio        String?
  gender     String?
  birthdate  DateTime?
  avatarUrl  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile?
  reputation Reputation?
  moodSessions MoodSession[]
}

model Profile {
  userId    Int      @id
  user      User     @relation(fields: [userId], references: [id])
  bio       String?
  photos    String[]
  lat       Float?
  lon       Float?
  interests String[]
}

model MoodSession {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  mood       String
  intent     String
  boundaries Json
  startedAt  DateTime @default(now())
  expiresAt  DateTime
  active     Boolean  @default(true)

  @@index([mood, active])
  @@index([userId, active])
}

model Like {
  id        String   @id @default(cuid())
  fromUser  Int
  toUser    Int
  moodCtx   String
  createdAt DateTime @default(now())

  @@index([toUser])
  @@index([fromUser, toUser])
}

model Match {
  id           String   @id @default(cuid())
  userA        Int
  userB        Int
  adultCtx     Boolean  @default(false)
  createdAt    DateTime @default(now())
  lastActiveAt DateTime @default(now())

  @@index([userA])
  @@index([userB])
}

model Hidden {
  id     Int @id @default(autoincrement())
  userId Int
  hideId Int

  @@unique([userId, hideId])
}

model Message {
  id        String   @id @default(cuid())
  matchId   String
  fromUser  Int
  type      String
  content   String
  createdAt DateTime @default(now())

  @@index([matchId, createdAt])
}

model Report {
  id        String   @id @default(cuid())
  reporter  Int
  target    Int
  reason    String
  details   String?
  createdAt DateTime @default(now())
}

model Block {
  id        String   @id @default(cuid())
  blocker   Int
  target    Int
  createdAt DateTime @default(now())
}

model Reputation {
  userId       Int    @id
  user         User   @relation(fields: [userId], references: [id])
  reportCount  Int    @default(0)
  blockCount   Int    @default(0)
  qualityScore Int    @default(0)
}

model ReportDetail {
  id           String   @id @default(cuid())
  fromUserId   Int
  targetUserId Int?
  messageId    String?
  reason       String
  createdAt    DateTime @default(now())

  @@index([targetUserId])
  @@index([messageId])
}


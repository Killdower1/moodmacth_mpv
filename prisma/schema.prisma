generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SwipeAction {
  LIKE
  DISLIKE
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  name         String
  gender       String?   // "male" | "female" | "other"
  age          Int?
  photos       Photo[]
  preferences  Preference?
  swipesMade   Swipe[]   @relation("swipes_made")
  swipesRecv   Swipe[]   @relation("swipes_recv")
  matchesA     Match[]   @relation("matches_a")
  matchesB     Match[]   @relation("matches_b")
  blocked      Block[]   @relation("blocks_made")
  blockedBy    Block[]   @relation("blocks_recv")
  reportsMade  Report[]  @relation("reports_made")
  reportsRecv  Report[]  @relation("reports_recv")
  lastActiveAt DateTime? @db.Timestamp(6)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Preference {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @unique
  preferredGenders String[] @default([])
  minAge           Int      @default(18)
  maxAge           Int      @default(60)
  distanceKm       Int?
  updatedAt        DateTime @updatedAt
}

model Swipe {
  id        String      @id @default(cuid())
  from      User        @relation("swipes_made", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        User        @relation("swipes_recv", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  action    SwipeAction
  createdAt DateTime    @default(now())

  @@unique([fromId, toId])
}

model Match {
  id        String   @id @default(cuid())
  userA     User     @relation("matches_a", fields: [userAId], references: [id], onDelete: Cascade)
  userAId   String
  userB     User     @relation("matches_b", fields: [userBId], references: [id], onDelete: Cascade)
  userBId   String
  createdAt DateTime @default(now())

  @@unique([userAId, userBId])
}

model Block {
  id        String   @id @default(cuid())
  by        User     @relation("blocks_made", fields: [byId], references: [id], onDelete: Cascade)
  byId      String
  target    User     @relation("blocks_recv", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  String
  createdAt DateTime @default(now())

  @@unique([byId, targetId])
}

model Report {
  id        String   @id @default(cuid())
  by        User     @relation("reports_made", fields: [byId], references: [id], onDelete: Cascade)
  byId      String
  target    User     @relation("reports_recv", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  String
  reason    String?
  createdAt DateTime @default(now())
}


model Notification {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String
  entityId  String?
  createdAt DateTime @default(now())
}

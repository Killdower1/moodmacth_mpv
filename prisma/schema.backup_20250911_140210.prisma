generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SwipeAction {
  LIKE
  DISLIKE
}

enum Mood {
  NORMAL
  SERIOUS
  FUN
  HOT
}

enum Ternary {
  YES
  NO
  PREFER_NOT
}

model User {
  id String @id @default(cuid())

  // email dibuat optional supaya bisa register pakai username+password
  email        String? @unique
  // username untuk login awal
  username     String  @unique
  passwordHash   String`r`n  phone          String?

  // profil dasar (onboarding 1)
  name        String
  gender      String?
  age         Int?
  dateOfBirth DateTime?
  bio         String?

  // progress onboarding: 0=baru register, 1=selesai step1, 2=selesai step2, 3=selesai step3
  onboardingStep Int @default(0)

  // onboarding 3
  smoking Ternary?
  alcohol Ternary?

  photos         Photo[]
  preferences    Preference?
  moodSessions   MoodSession[]
  swipesMade     Swipe[]        @relation("swipes_made")
  swipesRecv     Swipe[]        @relation("swipes_recv")
  matchesA       Match[]        @relation("matches_a")
  matchesB       Match[]        @relation("matches_b")
  blocked        Block[]        @relation("blocks_made")
  blockedBy      Block[]        @relation("blocks_recv")
  reportsMade    Report[]       @relation("reports_made")
  reportsRecv    Report[]       @relation("reports_recv")
  conversationsA Conversation[] @relation("conv_a")
  conversationsB Conversation[] @relation("conv_b")
  messages       Message[]
  notifications  Notification[]
  lastActiveAt   DateTime?      @db.Timestamp(6)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  likesGiven     Like[]         @relation("likesGiven")
  likesRecv      Like[]         @relation("likesRecv")
  consents       Consent[]
  UserInterest   UserInterest[]
}

model Photo {
  id        String   @id @default(cuid())
  url       String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Preference {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @unique
  preferredGenders String[] @default([])
  minAge           Int      @default(18)
  maxAge           Int      @default(60)
  distanceKm       Int?
  updatedAt        DateTime @updatedAt
}

model Swipe {
  id        String      @id @default(cuid())
  from      User        @relation("swipes_made", fields: [fromId], references: [id], onDelete: Cascade)
  fromId    String
  to        User        @relation("swipes_recv", fields: [toId], references: [id], onDelete: Cascade)
  toId      String
  action    SwipeAction
  createdAt DateTime    @default(now())

  @@unique([fromId, toId])
}

model Match {
  id        String   @id @default(cuid())
  userA     User     @relation("matches_a", fields: [userAId], references: [id], onDelete: Cascade)
  userAId   String
  userB     User     @relation("matches_b", fields: [userBId], references: [id], onDelete: Cascade)
  userBId   String
  createdAt DateTime @default(now())
  chat      Chat?

  @@unique([userAId, userBId])
}

model Block {
  id        String   @id @default(cuid())
  by        User     @relation("blocks_made", fields: [byId], references: [id], onDelete: Cascade)
  byId      String
  target    User     @relation("blocks_recv", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  String
  createdAt DateTime @default(now())

  @@unique([byId, targetId])
}

model Report {
  id        String   @id @default(cuid())
  by        User     @relation("reports_made", fields: [byId], references: [id], onDelete: Cascade)
  byId      String
  target    User     @relation("reports_recv", fields: [targetId], references: [id], onDelete: Cascade)
  targetId  String
  reason    String?
  createdAt DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  type      String
  entityId  String?
  createdAt DateTime @default(now())
}

model Conversation {
  id        String    @id @default(cuid())
  userA     User      @relation("conv_a", fields: [userAId], references: [id], onDelete: Cascade)
  userAId   String
  userB     User      @relation("conv_b", fields: [userBId], references: [id], onDelete: Cascade)
  userBId   String
  createdAt DateTime  @default(now())
  messages  Message[]

  @@unique([userAId, userBId])
}

model Message {
  id             String       @id @default(cuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)
  senderId       String
  text           String
  createdAt      DateTime     @default(now())
  chatId         String?
  chat           Chat?        @relation(fields: [chatId], references: [id])

  @@index([chatId, createdAt])
}

model MoodSession {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  mood   Mood

  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(cuid())
  fromId    String
  toId      String
  createdAt DateTime @default(now())
  from      User     @relation("likesGiven", fields: [fromId], references: [id], onDelete: Cascade)
  to        User     @relation("likesRecv", fields: [toId], references: [id], onDelete: Cascade)

  @@unique([fromId, toId])
}

model Chat {
  id        String    @id @default(cuid())
  matchId   String    @unique
  match     Match     @relation(fields: [matchId], references: [id])
  messages  Message[]
  consents  Consent[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Consent {
  id             String   @id @default(cuid())
  chatId         String
  userId         String
  allowPhoto     Boolean  @default(false)
  allowLocation  Boolean  @default(false)
  allowVideoCall Boolean  @default(false)
  allowVoiceCall Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  chat Chat @relation(fields: [chatId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

enum MessageType {
  TEXT
  IMAGE
  LOCATION
  SYSTEM
  CALL
}

model Interest {
  id    String         @id @default(cuid())
  name  String         @unique
  users UserInterest[]
}

model UserInterest {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  interest   Interest @relation(fields: [interestId], references: [id], onDelete: Cascade)
  interestId String

  @@unique([userId, interestId])
}

// Model lama berikut boleh dibiarkan kalau masih dipakai,
// tapi disarankan dihapus kalau redundant agar tidak membingungkan.
model UserProfile {
  id          String    @id @default(cuid())
  email       String    @unique
  name        String?
  dateOfBirth DateTime?
  gender      String?
  bio         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model ProfilePhoto {
  id        String   @id @default(cuid())
  email     String
  url       String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
}
  
model OtpCode {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  code       String
  channel    String
  expiresAt  DateTime
  consumedAt DateTime?
  createdAt  DateTime @default(now())

  @@index([userId, code])
}
